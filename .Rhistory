nearzerovariance <- nearZeroVar(train)
library(caret)
library(tidyverse)
# Set URL and local file paths
URLTrain <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
URLTest  <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DestTrain <- "pml-training.csv"
DestTest <- "pml-testing.csv"
#If files don't exist, download them, then read them in.
if(!file.exists(DestTrain)){
download.file(URLTrain, DestTrain)
}
if(!file.exists(DestTest)){
download.file(URLTrain, DestTest)
}
train <- read_csv(DestTrain)
test <- read_csv(DestTest)
train <- train %>%
select(-c("X1", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window"))
test <- test %>%
select(-c("X1", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window"))
nearzerovariance <- nearZeroVar(train)
train <- train[, -nearzerovariance]
test  <- test[, -nearzerovariance]
dim(train)
dim(test)
train_df <- train[complete.cases(train), ]
View(train_df)
View(test)
# Set URL and local file paths
URLTrain <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
URLTest  <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DestTrain <- "pml-training.csv"
DestTest <- "pml-testing.csv"
#If files don't exist, download them, then read them in.
if(!file.exists(DestTrain)){
download.file(URLTrain, DestTrain)
}
if(!file.exists(DestTest)){
download.file(URLTrain, DestTest)
}
train <- read_csv(DestTrain)
test <- read_csv(DestTest)
train <- train %>%
select(-c("X1", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window"))
test <- test %>%
select(-c("X1", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window"))
nearzerovariance <- nearZeroVar(train)
train <- train[, -nearzerovariance]
test  <- test[, -nearzerovariance]
dim(train)
dim(test)
library(caret)
library(tidyverse)
# Set URL and local file paths
URLTrain <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
URLTest  <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DestTrain <- "pml-training.csv"
DestTest <- "pml-testing.csv"
#If files don't exist, download them, then read them in.
if(!file.exists(DestTrain)){
download.file(URLTrain, DestTrain)
}
if(!file.exists(DestTest)){
download.file(URLTest, DestTest)
}
train <- read_csv(DestTrain)
test <- read_csv(DestTest)
# Set URL and local file paths
URLTrain <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
URLTest  <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DestTrain <- "pml-training.csv"
DestTest <- "pml-testing.csv"
#If files don't exist, download them, then read them in.
if(!file.exists(DestTrain)){
download.file(URLTrain, DestTrain)
}
if(!file.exists(DestTest)){
download.file(URLTest, DestTest)
}
train <- read_csv(DestTrain)
test <- read_csv(DestTest)
train <- train %>%
select(-c("X1", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window"))
test <- test %>%
select(-c("X1", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window"))
nearzerovariance <- nearZeroVar(train)
train <- train[, -nearzerovariance]
test  <- test[, -nearzerovariance]
dim(train)
dim(test)
naColumns <- sapply(train, function(x) mean(is.na(x))) > 0.95
train <- train[, naColumns == FALSE]
test  <- test[, naColumns == FALSE]
View(test)
set.seed(1234)
data_split  <- createDataPartition(y = train$classe, p = 0.8, list = FALSE)
model_train <- train[data_split, ]
model_test  <- train[-data_split, ]
View(model_test)
correlation_matrix <- cor(model_train[, -53])
corrplot(correlation_matrix, order = "FPC", method = "colour", type = "lower", tl.cex = 0.8, tl.col = rgb(0, 0, 0))
install.packages("corrplot")
library(caret)
library(tidyverse)
library(corrplot)
correlation_matrix <- cor(model_train[, -53])
corrplot(correlation_matrix, order = "FPC", method = "colour", type = "lower", tl.cex = 0.8, tl.col = rgb(0, 0, 0))
correlation_matrix <- cor(model_train[, -53])
corrplot(correlation_matrix, order = "FPC", method = "color", type = "lower", tl.cex = 0.8, tl.col = rgb(0, 0, 0))
high_correlation = findCorrelation(correlation_matrix, cutoff = 0.8)
names(model_train)[high_correlation]
library(caret)
library(tidyverse)
library(corrplot)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
install.packages("randomforest")
install.packages("randomForest")
library(caret)
library(tidyverse)
library(corrplot)
library(rpart)
library(rpart.plot)
library(randomForest)
set.seed(1234)
decision_tree_model <- rpart(classe ~ ., data = model_train, method="class")
fancyRpartPlot(decision_tree_model)
install.packages("rattle")
library(caret)
library(tidyverse)
library(corrplot)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
set.seed(1234)
decision_tree_model <- rpart(classe ~ ., data = model_train, method="class")
fancyRpartPlot(decision_tree_model)
decision_tree_predict <- predict(decision_tree_model, model_test, type = "class")
confusionMatrix(decision_tree_predict, model_test$classe)
table(decision_tree_predict)
table(model_test$classe)
table(decision_tree_predict)
table(model_test$classe)
decision_tree_predict
str(decision_tree_predict)
str(model_test$classe)
str(decision_tree_predict)
str(model_test$classe)
confusionMatrix(decision_tree_predict, as.factor(model_test$classe))
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
decision_tree_predict <- predict(decision_tree_model, model_test, type = "class")
confusionMatrix(decision_tree_predict, as.factor(model_test$classe))
library(caret)
library(tidyverse)
library(corrplot)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
decision_tree_predict <- predict(decision_tree_model, model_test, type = "class")
confusionMatrix(decision_tree_predict, as.factor(model_test$classe))
set.seed(1234)
random_forest_model <- train(classe ~ ., data = model_train, method = "rf", trControl = controlRF)
set.seed(1234)
random_forest_model <- train(classe ~ ., data = model_train, method = "rf")
set.seed(1234)
random_forest_model <- train(classe ~ ., data = model_train, method = "rf")
set.seed(1234)
random_forest_model <- train(classe ~ ., data = model_train, method = "rf")
library(caret)
library(tidyverse)
library(corrplot)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
set.seed(1234)
random_forest_model <- train(classe ~ ., data = model_train, method = "rf")
library(caret)
library(tidyverse)
library(corrplot)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
# Set URL and local file paths
URLTrain <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
URLTest  <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DestTrain <- "pml-training.csv"
DestTest <- "pml-testing.csv"
#If files don't exist, download them, then read them in.
if(!file.exists(DestTrain)){
download.file(URLTrain, DestTrain)
}
if(!file.exists(DestTest)){
download.file(URLTest, DestTest)
}
train <- read_csv(DestTrain)
test <- read_csv(DestTest)
train <- train %>%
select(-c("X1", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window"))
test <- test %>%
select(-c("X1", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window"))
nearzerovariance <- nearZeroVar(train)
train <- train[, -nearzerovariance]
test  <- test[, -nearzerovariance]
dim(train)
dim(test)
naColumns <- sapply(train, function(x) mean(is.na(x))) > 0.95
train <- train[, naColumns == FALSE]
test  <- test[, naColumns == FALSE]
set.seed(1234)
data_split  <- createDataPartition(y = train$classe, p = 0.8, list = FALSE)
model_train <- train[data_split, ]
model_test  <- train[-data_split, ]
correlation_matrix <- cor(model_train[, -53])
corrplot(correlation_matrix, order = "FPC", method = "color", type = "lower", tl.cex = 0.8, tl.col = rgb(0, 0, 0))
high_correlation = findCorrelation(correlation_matrix, cutoff = 0.8)
names(model_train)[high_correlation]
set.seed(1234)
decision_tree_model <- rpart(classe ~ ., data = model_train, method="class")
fancyRpartPlot(decision_tree_model)
decision_tree_predict <- predict(decision_tree_model, model_test, type = "class")
confusionMatrix(decision_tree_predict, as.factor(model_test$classe))
set.seed(1234)
random_forest_model <- train(classe ~ ., data = model_train, method = "rf")
set.seed(1234)
random_forest_model <- train(classe ~ ., data = model_train, method = "rf")
set.seed(1234)
random_forest_model <- randomForest(classe ~ ., data = model_train)
set.seed(1234)
random_forest_model <- randomForest(classe ~ ., data = model_train)
set.seed(1234)
forest_model_control <- trainControl(method = "cv", number = 3, verboseIter = FALSE)
random_forest_model <- train(classe ~ ., data = model_train, method="rf", trControl = forest_model_control)
library(caret)
library(tidyverse)
library(corrplot)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
# Set URL and local file paths
URLTrain <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
URLTest  <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DestTrain <- "pml-training.csv"
DestTest <- "pml-testing.csv"
#If files don't exist, download them, then read them in.
if(!file.exists(DestTrain)){
download.file(URLTrain, DestTrain)
}
if(!file.exists(DestTest)){
download.file(URLTest, DestTest)
}
train <- read_csv(DestTrain)
test <- read_csv(DestTest)
train <- train %>%
select(-c("X1", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window"))
test <- test %>%
select(-c("X1", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window"))
nearzerovariance <- nearZeroVar(train)
train <- train[, -nearzerovariance]
test  <- test[, -nearzerovariance]
dim(train)
dim(test)
naColumns <- sapply(train, function(x) mean(is.na(x))) > 0.95
train <- train[, naColumns == FALSE]
test  <- test[, naColumns == FALSE]
set.seed(1234)
data_split  <- createDataPartition(y = train$classe, p = 0.8, list = FALSE)
model_train <- train[data_split, ]
model_test  <- train[-data_split, ]
correlation_matrix <- cor(model_train[, -53])
corrplot(correlation_matrix, order = "FPC", method = "color", type = "lower", tl.cex = 0.8, tl.col = rgb(0, 0, 0))
high_correlation = findCorrelation(correlation_matrix, cutoff = 0.8)
names(model_train)[high_correlation]
set.seed(1234)
decision_tree_model <- rpart(classe ~ ., data = model_train, method="class")
fancyRpartPlot(decision_tree_model)
decision_tree_predict <- predict(decision_tree_model, model_test, type = "class")
confusionMatrix(decision_tree_predict, as.factor(model_test$classe))
set.seed(1234)
forest_model_control <- trainControl(method = "cv", number = 3, verboseIter = FALSE)
random_forest_model <- train(classe ~ ., data = model_train, method="rf", trControl = forest_model_control)
random_forest_predict <- predict(random_forest_model, model_test, type = "class")
random_forest_predict <- predict(random_forest_model, model_test)
confusionMatrix(random_forest_predict, model_test$classe)
confusionMatrix(random_forest_predict, as.factor(model_test$classe))
confusionMatrix(random_forest_predict, as.factor(model_test$classe))
confusionMatrix(decision_tree_predict, as.factor(model_test$classe))
library(caret)
library(tidyverse)
library(corrplot)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
# Set URL and local file paths
URLTrain <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
URLTest  <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DestTrain <- "pml-training.csv"
DestTest <- "pml-testing.csv"
#If files don't exist, download them, then read them in.
if(!file.exists(DestTrain)){
download.file(URLTrain, DestTrain)
}
if(!file.exists(DestTest)){
download.file(URLTest, DestTest)
}
train <- read_csv(DestTrain)
test <- read_csv(DestTest)
train <- train %>%
select(-c("X1", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window"))
test <- test %>%
select(-c("X1", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window"))
nearzerovariance <- nearZeroVar(train)
train <- train[, -nearzerovariance]
test  <- test[, -nearzerovariance]
dim(train)
dim(test)
naColumns <- sapply(train, function(x) mean(is.na(x))) > 0.95
train <- train[, naColumns == FALSE]
test  <- test[, naColumns == FALSE]
set.seed(1234)
data_split  <- createDataPartition(y = train$classe, p = 0.8, list = FALSE)
model_train <- train[data_split, ]
model_test  <- train[-data_split, ]
correlation_matrix <- cor(model_train[, -53])
corrplot(correlation_matrix, order = "FPC", method = "color", type = "lower", tl.cex = 0.8, tl.col = rgb(0, 0, 0))
high_correlation = findCorrelation(correlation_matrix, cutoff = 0.8)
names(model_train)[high_correlation]
set.seed(1234)
decision_tree_model <- rpart(classe ~ ., data = model_train, method="class")
fancyRpartPlot(decision_tree_model)
decision_tree_predict <- predict(decision_tree_model, model_test, type = "class")
confusionMatrix(decision_tree_predict, as.factor(model_test$classe))
set.seed(1234)
forest_model_control <- trainControl(method = "cv", number = 3, verboseIter = FALSE)
random_forest_model <- train(classe ~ ., data = model_train, method="rf", trControl = forest_model_control)
